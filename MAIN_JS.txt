npm init

---------------------------------------

package.json команду для старта сервера (который
создадим на следующем шаге). Для этого необходимо добавить:
"scripts": {
"start": "node server.js"
}

---------------------------------------

npm i webpack webpack-dev-middleware webpack-hot-middleware --save-dev

---------------------------------------

Теперь необходимо создать конфигурационный файл
webpack.config.js
var path = require('path')
var webpack = require('webpack')
module.exports = {
devtool: 'cheap-module-eval-source-map',
entry: [
'webpack-hot-middleware/client',
'./src/index'
],
output: {
path: path.join(__dirname, 'dist'),
filename: 'bundle.js',
publicPath: '/static/'
},
plugins: [
new webpack.optimize.OccurenceOrderPlugin(),
new webpack.HotModuleReplacementPlugin(),
new webpack.NoErrorsPlugin()
]
}

---------------------------------------

npm i express --save-dev

---------------------------------------

создадим наш web-сервер на его основе.
server.js
var webpack = require('webpack')
var webpackDevMiddleware = require('webpack-dev-middleware')
var webpackHotMiddleware = require('webpack-hot-middleware')
var config = require('./webpack.config')
var app = new (require('express'))()
var port = 3000
var compiler = webpack(config)
app.use(webpackDevMiddleware(compiler, { noInfo: true, publicPath: config.output.publi
cPath }))
app.use(webpackHotMiddleware(compiler))
app.get("/", function(req, res) {
res.sendFile(__dirname + '/index.html')
})
app.listen(port, function(error) {
if (error) {
console.error(error)
} else {
console.info("==> Listening on port %s. Open up http://localhost:%s/ in your bro
wser.", port, port)
}
})

---------------------------------------

index.html

---------------------------------------

header
main
jikjhgu
suci
